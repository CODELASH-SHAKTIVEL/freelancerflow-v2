// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  clerkUserId   String    @unique // clerk user id
  email         String    @unique
  name          String?
  imageUrl      String?
  transactions  Transaction[]
  accounts      Account[]
  budgets       Budget[]
  leads         Lead[]
  PromotionalMaterial PromotionalMaterial[]
  profile       Profile? // 1-to-1 (nullable until a profile is created)
  createdIssues Issue[]   @relation("Reporter")
  assignedIssues Issue[]  @relation("Assignee")
  folders       Folder[]
  tendersPosted Tender[] @relation("PostedTenders") // if user is admin
  bids          Bid[]    // if user is bidder
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@map("users")
}

model Tender {
  id              String    @id @default(uuid())
  title           String
  description     String
  rfqDate         DateTime  @default(now())
  deadline        DateTime
  typeOfWork      String
  skillsRequired  String
  jobDetails      String
  documentsUrl    String?   // reference documents (optional)

  // Created by a user (admin)
  createdById     String
  createdBy       User      @relation("PostedTenders", fields: [createdById], references: [id])

  // One tender can have many bids
  bids            Bid[]

  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Bid {
  id               String     @id @default(uuid())
  bidderId         String
  bidder           User       @relation(fields: [bidderId], references: [id])

  tenderId         String
  tender           Tender     @relation(fields: [tenderId], references: [id])

  bidAmount        Float
  bidDate          DateTime   @default(now())
  pitchDeckUrl     String?    // uploaded PDF URL

  status           BidStatus  @default(SUBMITTED)
  reasonNotBidding String?

  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
}

enum BidStatus {
  SUBMITTED
  NOT_BID
  REJECTED
  ACCEPTED
  UNDER_REVIEW
}

model PromotionalMaterial {
  id         String   @id @default(cuid())
  name       String
  tag        String
  type       String
  previewUrl String
  date       String
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Folder {
  id        String   @id @default(cuid())
  name      String
  slug      String   @unique
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  files     File[]
}

model File {
  id        String   @id @default(cuid())
  name      String
  url       String   // Cloudinary URL
  type      String   // e.g. PDF, Excel, Image, etc.
  size      String   // Optional for display
  folderId  String
  folder    Folder   @relation(fields: [folderId], references: [id])
  createdAt DateTime @default(now())
}


model Account {
  id           String        @id @default(uuid())
  name         String
  type         AccountType
  balance      Decimal       @default(0) // will ask inital balance while creating an account
  isDefault    Boolean       @default(false)
  userId       String
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@index([userId])
  @@map("accounts")
}

model Transaction {
  id                String            @id @default(uuid())
  type             TransactionType
  amount           Decimal
  description      String?
  date             DateTime
  category         String           
  receiptUrl       String?
  isRecurring      Boolean           @default(false)
  recurringInterval RecurringInterval? // Only used if isRecurring is true
  nextRecurringDate DateTime?         // Next date for recurring transaction
  lastProcessed    DateTime?         // Last time this recurring transaction was processed
  status           TransactionStatus  @default(COMPLETED)
  userId           String
  user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  accountId        String
  account          Account           @relation(fields: [accountId], references: [id], onDelete: Cascade)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt

  @@index([userId])
  @@index([accountId])
  @@map("transactions")
}


model Budget {
  id          String       @id @default(uuid())
  amount      Decimal
  lastAlertSent DateTime?  // Track when the last alert was sent
  userId      String       @unique
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@index([userId])
  @@map("budgets")
}

enum TransactionType {
  INCOME
  EXPENSE
}

enum AccountType {
  CURRENT
  SAVINGS
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

enum RecurringInterval {
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
}

enum JourneyStage {
  LEAD
  QUOTE
  PROGRESS
  COMPLETION
}

model Lead {
  id               String   @id @default(cuid())
  userId           String
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Journey Stage
  journeyStage     JourneyStage @default(LEAD)

  // --- Lead Stage ---
  personName       String
  mobileNo         String
  emailId          String
  capacity         String    // Personal / Official
  address          String
  pinCode          String
  state            String
  country          String
  designation      String
  department       String
  clientType       String

  // --- Quote Stage ---
  companyName      String?
  companyContact   String?
  companyEmail     String?
  companyWebsite   String?
  companyAddress   String?
  companyPinCode   String?
  companyState     String?
  companyCountry   String?
  companyType      String?
  previouslyWorked Boolean? // Ever worked with
  companyProfession String?

  // --- Progress Stage ---
  leadType         String?   // warm, hot, cold
  enquiryType      String?   // Direct, Reference, Sub Contract, Freelancing
  projectType      String?
  leadDate         DateTime?
  quoteDate        DateTime?
  action           String?   // quote, not quote, followup

  // --- Completion Stage ---
  jobMainCategory  String?
  jobSubCategory   String?
  leadMessage      String?

  // --- Status ---
  status           String

  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model Profile {
  id         String @id @default(cuid())
  userId     String @unique
  user       User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // ── Personal Section ──────────────────────────
  primaryMobileNo     String        // required
  secondaryMobileNo   String?
  personalEmail       String        // required
  workEmail           String?
  address             String
  pinCode             String
  state               String
  gender              Gender
  dateOfBirth         DateTime?

  // ── Educational Section ───────────────────────
  // 10th / “X”
  xInstitution        String?
  xBoard              String?
  xPassingYear        Int?

  // 12th / “XII”
  xiiInstitution      String?
  xiiBoard            String?
  xiiPassingYear      Int?

  // Formal Education (Degree / Diploma)
  formalDegree        String?
  formalInstitution   String?
  formalUniversity    String?
  formalPassingYear   Int?

  // Professional Education (MBA, CA, etc.)
  professionalCourse      String?
  professionalInstitution String?
  professionalUniversity  String?
  professionalPassingYear Int?

  // Skills / Certifications
  figmaCertified      Boolean   @default(false)
  reactJsCertified    Boolean   @default(false)

  // ── Work Section ──────────────────────────────
  totalExperienceYears Float?     // e.g. 7.5
  companies           String?     // CSV or semicolon-separated list
  jobDescriptions     String?     // condensed JDs or Markdown blob
  freelancingWorks    String?     // brief notes or links
  employmentType      EmploymentType?

  // ── Meta ──────────────────────────────────────
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Project {
  id             String   @id @default(cuid())
  name           String
  key            String
  description    String?
  organizationId String    // This will store the Clerk organization ID
  sprints        Sprint[]
  issues         Issue[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@unique([organizationId, key])
}

model Sprint {
  id        String   @id @default(cuid())
  name      String   
  startDate DateTime
  endDate   DateTime
  status    SprintStatus @default(PLANNED)
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String
  issues    Issue[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// ────────────────────────────────────────────────
// ENUMS  
// ────────────────────────────────────────────────
enum Gender {
  MALE
  FEMALE
  OTHER
}

enum EmploymentType {
  FULL_TIME
  PART_TIME
  FREELANCE
}

model Issue {
  id          String     @id @default(cuid())
  title       String
  description String?
  status      IssueStatus
  order       Int        // This will store the order within its status column
  priority    IssuePriority
  assignee    User?      @relation("Assignee", fields: [assigneeId], references: [id])
  assigneeId  String?
  reporter    User       @relation("Reporter", fields: [reporterId], references: [id])
  reporterId  String
  project     Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId   String
  sprint      Sprint?    @relation(fields: [sprintId], references: [id], onDelete: SetNull)
  sprintId    String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@index([status, order])
}

enum SprintStatus {
  PLANNED
  ACTIVE
  COMPLETED
}

enum IssueStatus {
  TODO
  IN_PROGRESS
  IN_REVIEW
  DONE
}

enum IssuePriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

