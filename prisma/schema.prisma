// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  clerkUserId   String    @unique // clerk user id
  email         String    @unique
  name          String?
  imageUrl      String?
  transactions  Transaction[]
  accounts      Account[]
  budgets       Budget[]
  leads         Lead[]
  PromotionalMaterial PromotionalMaterial[]
  profile       Profile? // 1-to-1 (nullable until a profile is created)
  createdIssues Issue[]   @relation("Reporter")
  assignedIssues Issue[]  @relation("Assignee")
  folders       Folder[]
  tendersPosted Tender[] @relation("PostedTenders") // if user is admin
  bids          Bid[]    // if user is bidder
  invoices  Invoice[] // One-to-many
  receipts  Receipt[] // One-to-many
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@map("users")
}

model Invoice {
  id              String   @id @default(uuid())
  invoiceNumber   String
  projectId       String?
  jobId           String?
  clientId        String
  clientName      String
  clientCompany   Json
  freelancer      Json
  dateOfInvoice   DateTime
  payableByDate   DateTime
  jobDetails      Json       // Array of jobs: topic, rate, quantity, gst, discount, amount
  terms           String?
  total           Float
  modeOfPayment   String
  typeOfPayment   String

  userId          String
  user            User      @relation(fields: [userId], references: [id])

  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Receipt {
  id              String   @id @default(uuid())
  receiptNumber   String
  coworkerId      String
  coworkerName    String
  projectName     String
  jobName         String
  projectCost     Float
  tdsDeductions   Float
  paidAmount      Float
  balanceAmount   Float
  paidDate        DateTime
  paymentDetails  String?

  userId          String
  user            User      @relation(fields: [userId], references: [id])

  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}



model Tender {
  id              String    @id @default(uuid())
  title           String
  description     String
  rfqDate         DateTime  @default(now())
  deadline        DateTime
  typeOfWork      String
  skillsRequired  String
  jobDetails      String
  documentsUrl    String?   // reference documents (optional)

  // Created by a user (admin)
  createdById     String
  createdBy       User      @relation("PostedTenders", fields: [createdById], references: [id])

  // One tender can have many bids
  bids            Bid[]

  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Bid {
  id               String     @id @default(uuid())
  bidderId         String
  bidder           User       @relation(fields: [bidderId], references: [id])

  tenderId         String
  tender           Tender     @relation(fields: [tenderId], references: [id])

  bidAmount        Float
  bidDate          DateTime   @default(now())
  pitchDeckUrl     String?    // uploaded PDF URL

  status           BidStatus  @default(SUBMITTED)
  reasonNotBidding String?

  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
}

enum BidStatus {
  SUBMITTED
  NOT_BID
  REJECTED
  ACCEPTED
  UNDER_REVIEW
}

model PromotionalMaterial {
  id         String   @id @default(cuid())
  name       String
  tag        String
  type       String
  previewUrl String
  date       String
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Folder {
  id        String   @id @default(cuid())
  name      String
  slug      String   @unique
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  files     File[]
}

model File {
  id        String   @id @default(cuid())
  name      String
  url       String   // Cloudinary URL
  type      String   // e.g. PDF, Excel, Image, etc.
  size      String   // Optional for display
  folderId  String
  folder    Folder   @relation(fields: [folderId], references: [id])
  createdAt DateTime @default(now())
}


model Account {
  id           String        @id @default(uuid())
  name         String
  type         AccountType
  balance      Decimal       @default(0) // will ask inital balance while creating an account
  isDefault    Boolean       @default(false)
  userId       String
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@index([userId])
  @@map("accounts")
}

model Transaction {
  id                String            @id @default(uuid())
  type             TransactionType
  amount           Decimal
  description      String?
  date             DateTime
  category         String           
  receiptUrl       String?
  isRecurring      Boolean           @default(false)
  recurringInterval RecurringInterval? // Only used if isRecurring is true
  nextRecurringDate DateTime?         // Next date for recurring transaction
  lastProcessed    DateTime?         // Last time this recurring transaction was processed
  status           TransactionStatus  @default(COMPLETED)
  userId           String
  user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  accountId        String
  account          Account           @relation(fields: [accountId], references: [id], onDelete: Cascade)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt

  @@index([userId])
  @@index([accountId])
  @@map("transactions")
}


model Budget {
  id          String       @id @default(uuid())
  amount      Decimal
  lastAlertSent DateTime?  // Track when the last alert was sent
  userId      String       @unique
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@index([userId])
  @@map("budgets")
}

enum TransactionType {
  INCOME
  EXPENSE
}

enum AccountType {
  CURRENT
  SAVINGS
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

enum RecurringInterval {
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
}

enum JourneyStage {
  LEAD
  QUOTE
  PROGRESS
  COMPLETION
}

enum LeadSource {
  FACEBOOK
  INSTAGRAM
  LINKEDIN
  GMB
  WEBSITE
  REPEAT
  REFERENCE
}

enum ReferenceForLead {
  CAMPAIGN
  BLOG
  POST
  OFFER
  SCHEMES
  DISCOUNTS
  EXHIBITIONS
  DISCOUNT_COUPON
}

enum TypeOfLead {
  JOB
  MARKETING
  VENDOR
  DIGITAL_MARKETING
  JOB_ENQUIRY
  BUSINESS_ENQUIRY
  CORE_SERVICES_RELEVANT
  CORE_SERVICES_IRRELEVANT
}

enum LeadDetails {
  WARM
  HOT
  COLD
}

enum EnquiryType {
  NEW
  REPEAT
}

enum ActionOnLead {
  QUOTE
  NOT_QUOTE
  FOLLOWUP
}

enum LeadStatus {
  NEW_LEAD
  FOLLOWUP
  CLOSED
  LAPSED
  SUSPENDED
  POSTPONED
}



model Profile {
  id                  String     @id @default(cuid())
  userId              String     @unique
  user                User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  // ── Personal Section ──────────────────────────
  name                String
  primaryMobileNo     String
  secondaryMobileNo   String?
  personalEmail       String
  workEmail           String?
  website             String?
  address             String?
  pinCode             String?
  state               String?
  gender              Gender
  dateOfBirth         DateTime?

  // ── Educational Section ───────────────────────
  xInstitution        String?
  xBoard              String?
  xPassingYear        Int?

  xiiInstitution      String?
  xiiBoard            String?
  xiiPassingYear      Int?

  formalDegree        String?
  formalInstitution   String?
  formalUniversity    String?
  formalPassingYear   Int?

  professionalCourse      String?
  professionalInstitution String?
  professionalUniversity  String?
  professionalPassingYear Int?

  // ── Profession / Tools ────────────────────────
  professionId        String?
  profession          Profession?   @relation(fields: [professionId], references: [id])
  professionalTools   Tool[]        @relation("ProfileTools")

  // ── Work Section ──────────────────────────────
  totalExperienceYears Float?
  companies           String?
  jobDescriptions     String?
  freelancingWorks    String?
  employmentType      EmploymentType?

  // // ── Promotional Tools ─────────────────────────
  // resumes             String[]
  // cvs                 String[]
  // portfolios          String[]
  // presentations       String[]
  // proposals           String[]
  // rateCards           String[]
  // catalogues          String[]
  // banners             String[]
  // visitingCards       String[]
  // certificates        String[]
  // awards              String[]

  // ── Meta ──────────────────────────────────────
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
}

model Profession {
  id          String     @id @default(cuid())
  name        String     @unique
  profiles    Profile[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Tool {
  id          String     @id @default(cuid())
  name        String     @unique
  profiles    Profile[]  @relation("ProfileTools")
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Project {
  id             String   @id @default(cuid())
  name           String
  key            String
  description    String?

  organizationId String    // This will store the Clerk organization ID

  duration       Int?       // Estimated duration in days
  deadline       DateTime?  // Project delivery deadline
  projectScope   String?    // High-level summary of the project scope
  priority       ProjectPriority @default(medium) // Priority of the project
  status         ProjectStatus   @default(active) // Project current state

  sprints        Sprint[]
  issues         Issue[]

  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@unique([organizationId, key])
}

enum ProjectStatus {
  active
  completed
  on_hold
  cancelled
}

enum ProjectPriority {
  low
  medium
  high
  urgent
}


model Sprint {
  id        String   @id @default(cuid())
  name      String   
  startDate DateTime
  endDate   DateTime
  status    SprintStatus @default(PLANNED)
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String
  issues    Issue[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// ────────────────────────────────────────────────
// ENUMS  
// ────────────────────────────────────────────────
enum Gender {
  MALE
  FEMALE
  OTHER
}

enum EmploymentType {
  FULL_TIME
  PART_TIME
  FREELANCE
}

model Issue {
  id          String     @id @default(cuid())
  title       String
  description String?
  status      IssueStatus
  order       Int        // This will store the order within its status column
  priority    IssuePriority
  assignee    User?      @relation("Assignee", fields: [assigneeId], references: [id])
  assigneeId  String?
  reporter    User       @relation("Reporter", fields: [reporterId], references: [id])
  reporterId  String
  project     Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId   String
  sprint      Sprint?    @relation(fields: [sprintId], references: [id], onDelete: SetNull)
  sprintId    String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@index([status, order])
}

enum SprintStatus {
  PLANNED
  ACTIVE
  COMPLETED
}

enum IssueStatus {
  TODO
  IN_PROGRESS
  IN_REVIEW
  DONE
}

enum IssuePriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

model Lead {
  id               String         @id @default(cuid())
  userId           String
  user             User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Journey Stage
  journeyStage     JourneyStage   @default(LEAD)

  // Client Info
  personName       String?
  mobileNo         String?
  emailId          String?
  capacity         String?        // Personal / Official
  address          String?
  pinCode          String?
  state            String?
  country          String?
  designation      String?
  department       String?
  clientType       String?

  // Company Info
  companyName      String?
  companyContact   String?
  companyEmail     String?
  companyWebsite   String?
  companyAddress   String?
  companyPinCode   String?
  companyState     String?
  companyCountry   String?
  companyType      String?
  previouslyWorked Boolean?
  companyProfession String?

  // Lead Source Info
  leadSource       LeadSource?
  referenceForLead ReferenceForLead?

  // Lead Details
  typeOfLead       TypeOfLead?
  leadDetails      LeadDetails?
  enquiryType      EnquiryType?
  action           ActionOnLead?
  status           LeadStatus?

  leadDate         DateTime?
  quoteDate        DateTime?

  // Optional Info
  jobMainCategory  String?
  jobSubCategory   String?
  leadMessage      String?

  // CRM Relations (added only for relational access)
  crmNotes         CrmNote[]
  crmFollowUps     CrmFollowUp[]
  crmTags          CrmTag[]
  crmStatus        CrmStatus?  

  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
}

model CrmNote {
  id        String   @id @default(cuid())
  leadId    String
  lead      Lead     @relation(fields: [leadId], references: [id], onDelete: Cascade)
  content   String
  createdAt DateTime @default(now())
}

model CrmFollowUp {
  id        String   @id @default(cuid())
  leadId    String
  lead      Lead     @relation(fields: [leadId], references: [id], onDelete: Cascade)
  title     String
  dueDate   DateTime
  status    String   @default("pending") // "pending", "done"
  createdAt DateTime @default(now())
}

model CrmTag {
  id        String   @id @default(cuid())
  leadId    String
  lead      Lead     @relation(fields: [leadId], references: [id], onDelete: Cascade)
  name      String
  createdAt DateTime @default(now())
}

model CrmStatus {
  id        String   @id @default(cuid())
  leadId    String   @unique
  lead      Lead     @relation(fields: [leadId], references: [id], onDelete: Cascade)
  value     String   // e.g., "To Contact", "In Progress", etc.
  updatedAt DateTime @updatedAt
}